---
export interface Props {
  rating: number;
}

const { rating } = Astro.props as Props;
---

<div class="flex ratings">
  {
    [...Array(rating)].map((_, idx) => (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="text-brand-500  [&.show]:visible [&.show]:translate-y-0 [&.show]:translate-x-0 [&.show]:scale-100 [&.show]:opacity-100 invisible h-12 w-12 translate-y-full translate-x-full scale-[25] opacity-0 transition-all delay-[var(--delay)]"
        viewBox="0 0 20 20"
        fill="currentColor"
        style={{ "--delay": `${idx * 200}ms` }}
      >
        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
      </svg>
    ))
  }
</div>

<script>
  const ratingsContainer = document.querySelector<HTMLElement>(".ratings");

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target
            .querySelectorAll("svg")
            .forEach((s) => s.classList.add("show"));
        }
      });
    },
    {
      threshold: 0.5,
    }
  );

  if (ratingsContainer) {
    observer.observe(ratingsContainer);
  }
</script>
